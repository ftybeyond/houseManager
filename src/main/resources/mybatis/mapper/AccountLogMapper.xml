<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qth.dao.AccountLogMapper">
  <resultMap id="BaseResultMap" type="com.qth.model.AccountLog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="house_code" jdbcType="VARCHAR" property="houseCode" />
    <result column="house_owner" jdbcType="VARCHAR" property="houseOwner" />
    <result column="balance" jdbcType="DECIMAL" property="balance" />
    <result column="trade_money" jdbcType="DECIMAL" property="tradeMoney" />
    <result column="trade_time" jdbcType="TIMESTAMP" property="tradeTime" />
    <result column="trade_type" jdbcType="INTEGER" property="tradeType" />
    <result column="handler" jdbcType="VARCHAR" property="handler" />
    <result column="seq" jdbcType="BIGINT" property="seq" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account_log
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <delete id="deleteTempByRecord" parameterType="java.lang.Integer">
    delete from account_log_temp
    where remark = #{value}
  </delete>

  <insert id="insert" parameterType="com.qth.model.AccountLog">
    insert into account_log (id, house_code, house_owner, 
      balance, trade_money, trade_time, 
      trade_type, handler,seq,remark)
    values (#{id,jdbcType=INTEGER}, #{houseCode,jdbcType=VARCHAR}, #{houseOwner,jdbcType=VARCHAR}, 
      #{balance,jdbcType=DECIMAL}, #{tradeMoney,jdbcType=DECIMAL}, #{tradeTime,jdbcType=TIMESTAMP}, 
      #{tradeType,jdbcType=INTEGER}, #{handler,jdbcType=VARCHAR},#{seq,jdbcType=BIGINT},#{remark,jdbcType=VARCHAR})
  </insert>

  <insert id="insertTemp" parameterType="com.qth.model.AccountLog">
    insert into account_log_temp (id, house_code, house_owner,
    balance, trade_money, trade_time,
    trade_type, handler,seq,remark)
    values (#{id,jdbcType=INTEGER}, #{houseCode,jdbcType=VARCHAR}, #{houseOwner,jdbcType=VARCHAR},
    #{balance,jdbcType=DECIMAL}, #{tradeMoney,jdbcType=DECIMAL}, #{tradeTime,jdbcType=TIMESTAMP},
    #{tradeType,jdbcType=INTEGER}, #{handler,jdbcType=VARCHAR},#{seq,jdbcType=BIGINT},#{remark,jdbcType=VARCHAR})
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.qth.model.AccountLog">
    update account_log
    set house_code = #{houseCode,jdbcType=VARCHAR},
      house_owner = #{houseOwner,jdbcType=VARCHAR},
      balance = #{balance,jdbcType=DECIMAL},
      trade_money = #{tradeMoney,jdbcType=DECIMAL},
      trade_time = #{tradeTime,jdbcType=TIMESTAMP},
      trade_type = #{tradeType,jdbcType=INTEGER},
      handler = #{handler,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, house_code, house_owner, balance, trade_money, trade_time, trade_type, 
    handler,seq,remark
    from account_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, house_code, house_owner, balance, trade_money, trade_time, trade_type,
    handler,seq,remark
    from account_log
  </select>

  <select id="selectByRecord" parameterType="com.qth.model.RepairRecord" resultMap="BaseResultMap">
    select id, house_code, house_owner, balance, trade_money, trade_time, trade_type,
    handler,seq,remark
    from account_log
    where seq = #{shareSeq} and remark = #{id}
  </select>


  <update id="backByRecord" parameterType="com.qth.model.RepairRecord" >
    update account_log
    set trade_type = 5 , seq=UNIX_TIMESTAMP(now())
    where seq = #{shareSeq} and remark = #{id}
  </update>

  <select id="selectTempByRecord" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, house_code, house_owner, balance, trade_money, trade_time, trade_type,
    handler,seq,remark
    from account_log_temp
    where remark = #{value}
  </select>

  <select id="selectHouseChangeWithDateRange" parameterType="java.util.Map" resultMap="BaseResultMap">
    select *
    from account_log
    where house_code = #{houseCode} and  trade_time BETWEEN #{fromDate,jdbcType=TIMESTAMP} and #{endDate,jdbcType=TIMESTAMP}
  </select>

  <select id="selectByHouseCode" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT
	  al.*
    FROM
        account_log al
    WHERE
        al.house_code = #{value}
  </select>

  <select id="selectReportDetail" parameterType="com.qth.model.dto.ReportForm" resultMap="BaseResultMap">
    SELECT
        al.*, ra.`name` AS residentialAreaName,
        (al.balance+trade_money) as afterTrade,
        h.code as joinHouseCode,
        h.owner_name as joinHouseOwner,
        u.`name` AS unitName,
        b.`name` AS buildingName,
        h.`name` AS houseName,
        h.area as houseArea,
        h.floor as houseFloor
    FROM
        account_log al
    RIGHT JOIN house h ON h.`code` = al.house_code
    INNER JOIN unit u ON u.id = h.unit
    INNER JOIN building b ON b.id = u.building
    INNER JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      <include refid="reportConditions"/>
    </where>
    <if test="length>0">
      limit #{start} ,#{length}
    </if>
  </select>

  <select id="selectReportDetailCount" parameterType="com.qth.model.dto.ReportForm" resultType="int">
    SELECT
    count(*)
    FROM
    account_log al
    RIGHT JOIN house h ON h.`code` = al.house_code
    INNER JOIN unit u ON u.id = h.unit
    INNER JOIN building b ON b.id = u.building
    INNER JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      <include refid="reportConditions"/>
    </where>
  </select>

  <select id="reportSum" parameterType="com.qth.model.dto.ReportForm" resultType="java.lang.Double">
    select sum(t.result) from (
    SELECT
    h.account_balance as result
    FROM
    account_log al
    RIGHT JOIN house h ON h.`code` = al.house_code
    INNER JOIN unit u ON u.id = h.unit
    INNER JOIN building b ON b.id = u.building
    INNER JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      <include refid="reportConditions"/>
    </where>
    GROUP BY h.id
    HAVING
    max(trade_time)
    ) t
  </select>

  <select id="reportTradeSum" parameterType="com.qth.model.dto.ReportForm" resultType="java.lang.Double">
    SELECT
    sum(al.trade_money)
    FROM
    account_log al
    RIGHT JOIN house h ON h.`code` = al.house_code
    INNER JOIN unit u ON u.id = h.unit
    INNER JOIN building b ON b.id = u.building
    INNER JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      <include refid="reportConditions"/>
    </where>
  </select>

  <select id="selectReportSummary" parameterType="com.qth.model.dto.ReportForm" resultMap="BaseResultMap">
    SELECT
        al.*, ra.`name` AS residentialAreaName,
        u.`name` AS unitName,
        b.`name` AS buildingName,
        h.`name` AS houseName,
        sum(al.trade_money) as sumResult
    FROM
        account_log al
    right JOIN house h ON h.`code` = al.house_code
    INNER JOIN unit u ON u.id = h.unit
    INNER JOIN building b ON b.id = u.building
    INNER JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      <include refid="reportConditions"/>
    </where>
    GROUP BY ${groupByColumn}
  </select>

  <sql id="reportConditions">
    <if test="sqlAppend != null">
      and ${sqlAppend}
    </if>
    <if test="fromDate != null">
      <choose>
        <when test="summaryType==3">
          and
          DATE_FORMAT(
          SUBSTR(
          al.remark,
          (LOCATE('至', al.remark) + 1)
          ),
          '%Y-%m-%d'
          ) >= DATE_FORMAT(#{fromDate}, '%Y-%m-%d')
        </when>
        <otherwise>
          and DATE_FORMAT(al.trade_time, '%Y-%m-%d') &gt;= DATE_FORMAT(#{fromDate},'%Y-%m-%d')
        </otherwise>
      </choose>
    </if>
    <if test="endDate != null">
      <choose>
        <when test="summaryType==3">
          and
          DATE_FORMAT(
          SUBSTR(
          al.remark,
          (LOCATE('至', al.remark) + 1)
          ),
          '%Y-%m-%d'
          ) &lt;= DATE_FORMAT(#{endDate},'%Y-%m-%d')
        </when>
        <otherwise>
          and DATE_FORMAT(al.trade_time, '%Y-%m-%d') &lt;= DATE_FORMAT(#{endDate},'%Y-%m-%d')
        </otherwise>
      </choose>
    </if>
    <if test="seq != null and seq &gt;0">
      and al.seq = #{seq}
    </if>
    <!-- 未缴 -->
    <if test="summaryType !=null and summaryType==-1">
      and al.id is null
    </if>
    <if test="summaryType !=null and summaryType &gt;0 and summaryType &lt;4">
      and (al.trade_type = #{summaryType})
    </if>
    <!-- 分摊，包含回滚 -->
    <if test="summaryType !=null and summaryType == 4">
      and al.trade_type = 4
    </if>
  </sql>


  <select id="shareAccountDetail" parameterType="com.qth.model.AccountLog" resultMap="BaseResultMap">
    SELECT
    al.*, ra.`name` AS residentialAreaName,
    u.`name` AS unitName,
    b.`name` AS buildingName,
    h.`name` AS houseName,
    h.area as houseArea,
    h.floor as houseFloor
    FROM
    account_log_temp al
    LEFT JOIN house h ON h.`code` = al.house_code
    INNER JOIN unit u ON u.id = h.unit
    INNER JOIN building b ON b.id = u.building
    INNER JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      al.remark = #{remark}
    </where>
    <if test="length>0">
      limit #{start} ,#{length}
    </if>
  </select>

  <select id="shareCountAccountDetail" parameterType="com.qth.model.AccountLog" resultType="int">
    SELECT
    count(al.id)
    FROM
    account_log_temp al
    LEFT JOIN house h ON h.`code` = al.house_code
    INNER JOIN unit u ON u.id = h.unit
    INNER JOIN building b ON b.id = u.building
    INNER JOIN residential_area ra ON ra.id = b.residential_area
    WHERE   al.remark = #{remark}
  </select>

  <select id="shareSumAccountDetail" parameterType="com.qth.model.AccountLog" resultType="java.lang.Double">
    SELECT
    sum(al.trade_money)
    FROM
    account_log_temp al
    LEFT JOIN house h ON h.`code` = al.house_code
    INNER JOIN unit u ON u.id = h.unit
    INNER JOIN building b ON b.id = u.building
    INNER JOIN residential_area ra ON ra.id = b.residential_area
    WHERE  al.remark = #{remark}
  </select>
</mapper>