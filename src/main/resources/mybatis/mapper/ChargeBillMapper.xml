<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qth.dao.ChargeBillMapper">
  <resultMap id="BaseResultMap" type="com.qth.model.ChargeBill">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="house_code" jdbcType="VARCHAR" property="houseCode" />
    <result column="house_area" jdbcType="DECIMAL" property="houseArea" />
    <result column="house_unit_price" jdbcType="DECIMAL" property="houseUnitPrice" />
    <result column="house_owner" jdbcType="VARCHAR" property="houseOwner" />
    <result column="house_tel" jdbcType="VARCHAR" property="houseTel" />
    <result column="ratio" jdbcType="DECIMAL" property="ratio" />
    <result column="charge_type" jdbcType="INTEGER" property="chargeType" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="handler" jdbcType="VARCHAR" property="handler" />
    <result column="actual_sum" jdbcType="DECIMAL" property="actualSum" />
    <result column="flow_num" jdbcType="VARCHAR" property="flowNum" />
    <result column="invoice_num" jdbcType="VARCHAR" property="invoiceNum" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from charge_bill
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qth.model.ChargeBill">
    <selectKey resultType="java.lang.Integer" keyProperty="id">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into charge_bill (id, house_code, house_area,
      house_unit_price, house_owner,house_tel, ratio,
      charge_type, create_time, handler,
      actual_sum, invoice_num,flow_num, state
      )
    values (#{id,jdbcType=INTEGER}, #{houseCode,jdbcType=VARCHAR}, #{houseArea,jdbcType=DECIMAL},
      #{houseUnitPrice,jdbcType=DECIMAL}, #{houseOwner,jdbcType=VARCHAR},#{houseTel,jdbcType=VARCHAR}, #{ratio,jdbcType=DECIMAL},
      #{chargeType,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{handler,jdbcType=VARCHAR},
      #{actualSum,jdbcType=DECIMAL}, #{invoiceNum,jdbcType=VARCHAR},#{flowNum,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.qth.model.ChargeBill">
    update charge_bill
    set house_code = #{houseCode,jdbcType=VARCHAR},
      house_area = #{houseArea,jdbcType=DECIMAL},
      house_unit_price = #{houseUnitPrice,jdbcType=DECIMAL},
      house_owner = #{houseOwner,jdbcType=VARCHAR},
      ratio = #{ratio,jdbcType=DECIMAL},
      charge_type = #{chargeType,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      handler = #{handler,jdbcType=VARCHAR},
      actual_sum = #{actualSum,jdbcType=DECIMAL},
      invoice_num = #{invoiceNum,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateState" parameterType="com.qth.model.ChargeBill">
    update charge_bill
    set
    state = #{state}
    where id = #{id}
  </update>

  <select id="selectCountByInvoiceNum" parameterType="java.lang.String" resultType="int">
    select count(*) from charge_bill
    where invoice_num = #{value}
  </select>

  <update id="updateInvoiceNum" parameterType="com.qth.model.ChargeBill">
    update charge_bill
    set
    invoice_num = #{invoiceNum}
    WHERE  id = #{id}
  </update>

  <update id="abolishInvoiceNum" parameterType="com.qth.model.ChargeBill">
    update charge_bill
    set
    invoice_num = NULL
    WHERE  id = #{id}
  </update>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select *
    from charge_bill
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select *
    from charge_bill
  </select>

  <select id="countByHouse" parameterType="int" resultType="int">
    SELECT
        count(*)
    FROM
        charge_bill cb
    INNER JOIN house h ON cb.house_code = h.`code`
    WHERE
        h.id = #{value}
    AND cb.state >= 0
  </select>

  <select id="selectByTreeNode" parameterType="com.qth.model.dto.HouseTreeModel" resultMap="BaseResultMap">
    SELECT
	cb.*
    FROM
        charge_bill cb
    LEFT JOIN house h ON cb.house_code = h.`code`
    LEFT JOIN unit u ON u.id = h.unit
    LEFT JOIN building b ON b.id = u.id
    LEFT JOIN residential_area ra ON ra.id = b.residential_area
    where 1=1
    <choose>
      <when test="level == 0">
        and ra.id = #{id}
      </when>
      <when test="level == 1">
        and b.id = #{id}
      </when>
      <when test="level == 2">
        and u.id = #{id}
      </when>
      <when test="level == 3">
        and u.id = #{id} and h.floor = #{name}
      </when>
      <when test="level == 4">
        and h.id = #{id}
      </when>
    </choose>
    <if test="ownerName!=null and ownerName.length >0">
      and h.owner_name = #{ownerName}
    </if>
    <if test="houseCode!=null and houseCode.length >0">
      and h.code LIKE '%${houseCode}%'
    </if>
    <if test="sign == 0">
      and (cb.state=0 or cb.state=2)
    </if>
    <if test="length>0">
      limit #{start} ,#{length}
    </if>
  </select>

  <select id="selectCountByTreeNode" parameterType="com.qth.model.dto.HouseTreeModel" resultType="int">
    SELECT
    count(cb.id)
    FROM
    charge_bill cb
    LEFT JOIN house h ON cb.house_code = h.`code`
    LEFT JOIN unit u ON u.id = h.unit
    LEFT JOIN building b ON b.id = u.id
    LEFT JOIN residential_area ra ON ra.id = b.residential_area
    where 1=1
    <choose>
      <when test="level == 0">
        and ra.id = #{id}
      </when>
      <when test="level == 1">
        and b.id = #{id}
      </when>
      <when test="level == 2">
        and u.id = #{id}
      </when>
      <when test="level == 3">
        and u.id = #{id} and h.floor = #{name}
      </when>
      <when test="level == 4">
        and h.id = #{id}
      </when>
    </choose>
    <if test="ownerName!=null and ownerName.length >0">
      and h.owner_name = #{ownerName}
    </if>
    <if test="houseCode!=null and houseCode.length >0">
      and h.code LIKE '%${houseCode}%'
    </if>
    <if test="sign == 0">
      and (cb.state=0 or cb.state=2)
    </if>
  </select>

  <select id="selectByForm" parameterType="com.qth.model.dto.ChargeBillForm" resultMap="BaseResultMap">
    SELECT
        cb.*,ra.`name` as residentialAreaName
    FROM
        charge_bill cb
    LEFT JOIN house h ON cb.house_code = h.`code`
    LEFT JOIN unit u ON h.unit = u.id
    LEFT JOIN building b ON b.id = u.building
    LEFT JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      <if test="residentialArea!=null">
        AND ra.id = #{residentialArea}
      </if>
      <if test="fromDate!=null">
        AND cb.create_time  &gt;= #{fromDate}
      </if>
      <if test="endDate!=null">
        AND cb.create_time &lt;= #{endDate}
      </if>
      <if test="handler!=null">
        AND cb.`handler` = #{handler}
      </if>
      <if test="ownerName!=null">
        AND cb.house_owner = #{ownerName}
      </if>
      <if test="flowNum!=null">
        AND cb.flow_num = #{flowNum}
      </if>
    </where>
    <if test="length>0">
      limit #{start} ,#{length}
    </if>

  </select>

  <select id="selectCountByForm" parameterType="com.qth.model.dto.ChargeBillForm" resultType="int">
    SELECT
      count(cb.id)
    FROM
    charge_bill cb
    LEFT JOIN house h ON cb.house_code = h.`code`
    LEFT JOIN unit u ON h.unit = u.id
    LEFT JOIN building b ON b.id = u.building
    LEFT JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      <if test="residentialArea!=null">
        AND ra.id = #{residentialArea}
      </if>
      <if test="fromDate!=null">
        AND cb.create_time &gt;= #{fromDate}
      </if>
      <if test="endDate!=null">
        AND cb.create_time &lt;= #{endDate}
      </if>
      <if test="handler!=null">
        AND cb.`handler` = #{handler}
      </if>
      <if test="ownerName!=null">
        AND cb.house_owner = #{ownerName}
      </if>
      <if test="flowNum!=null">
        AND cb.flow_num = #{flowNum}
      </if>
    </where>
  </select>

  <select id="selectInvoiceByForm" parameterType="com.qth.model.dto.InvoiceForm" resultMap="BaseResultMap">
    SELECT
    cb.*,ra.name as residentialAreaName ,h.account_balance as accountBalance
    FROM
    charge_bill cb
    LEFT JOIN invoice_log il ON cb.invoice_num = il.invoice_num
    LEFT JOIN house h ON h.`code` = cb.house_code
    LEFT JOIN unit u ON h.unit = u.id
    LEFT JOIN building b ON b.id = u.building
    LEFT JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      (cb.state = 1 or cb.state = 3)
      <if test="ownerName!=null">
        and h.owner_name = #{ownerName}
      </if>
      <if test="ownerTel!=null">
        and h.owner_tel = #{ownerTel}
      </if>
      <if test="residentialArea!=null">
        and ra.id = #{residentialArea}
      </if>
      <if test="invoiceNum!=null">
        and il.invoice_num = #{invoiceNum}
      </if>
    </where>
    <if test="length>0">
      limit #{start} ,#{length}
    </if>
  </select>

  <select id="selectCountInvoiceByForm" parameterType="com.qth.model.dto.InvoiceForm" resultType="int">
    SELECT
    count(cb.id)
    FROM
    charge_bill cb
    LEFT JOIN invoice_log il ON cb.invoice_num = il.invoice_num
    LEFT JOIN house h ON h.`code` = cb.house_code
    LEFT JOIN unit u ON h.unit = u.id
    LEFT JOIN building b ON b.id = u.building
    LEFT JOIN residential_area ra ON ra.id = b.residential_area
    <where>
      (cb.state = 1 or cb.state = 3)
      <if test="ownerName!=null">
        and h.owner_name = #{ownerName}
      </if>
      <if test="ownerTel!=null">
        and h.owner_tel = #{ownerTel}
      </if>
      <if test="residentialArea!=null">
        and ra.id = #{residentialArea}
      </if>
      <if test="invoiceNum!=null">
        and il.invoice_num = #{invoiceNum}
      </if>
    </where>
  </select>

  <select id="printInfo" parameterType="int" resultType="com.qth.model.dto.ChargeBillPrintInfo">
    SELECT
        cb.flow_num as chargeNum,
        cb.actual_sum as chargeMoney,
        b.`name` as buildingName,
        u.`name` as unitName,
        h.`name` as houseName,
        h.owner_name as ownerName,
        h.owner_psptid as ownerCard,
        h.area as houseArea,
        h.unit_price as houseUnitPrice,
        ra.`name` as residentialAreaName
    FROM
        charge_bill cb
    LEFT JOIN house h ON cb.house_code = h.`code`
    LEFT JOIN unit u on u.id = h.unit
    LEFT JOIN building b on b.id = u.building
    LEFT JOIN residential_area ra on b.residential_area = ra.id
    WHERE cb.id = #{value}
  </select>

</mapper>